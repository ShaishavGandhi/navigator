apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: '../gradle/gradle-mvn-push.gradle'

android {
    compileSdkVersion rootProject.compileSdk

    defaultConfig {
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all {
        it.generateBuildConfig.enabled = false
    }

}

dependencies {
    api project(":annotations")

    testImplementation rootProject.junit
    testImplementation rootProject.compileTesting
    testImplementation rootProject.supportLibrary
    testImplementation rootProject.androidxFragment
    testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
    testImplementation files(getRuntimeJar())
    testImplementation project(":compiler")
    implementation rootProject.kotlin
}
repositories {
    mavenCentral()
}

static def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
        File runtimeJar = new File(javaBase, "lib/rt.jar")
        if (runtimeJar.exists()) {
            return runtimeJar
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar")
        return runtimeJar.exists() ? runtimeJar : null
    } catch (IOException e) {
        throw new RuntimeException(e)
    }
}
